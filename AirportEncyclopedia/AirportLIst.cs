// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AirportType;
//
//    var airportSizeAndType = AirportSizeAndType.FromJson(jsonString);

namespace AirportType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;



    public partial class AirportList

    {
        [JsonProperty("continent")]
        public string Continent { get; set; }

        [JsonProperty("coordinates")]
        public string Coordinates { get; set; }

        [JsonProperty("elevation_ft")]
        public long ElevationFt { get; set; }

        [JsonProperty("gps_code")]
        public string GpsCode { get; set; }

        [JsonProperty("iata_code")]
        public object IataCode { get; set; }

        [JsonProperty("ident")]
        public string Ident { get; set; }

        [JsonProperty("iso_country")]
        public string IsoCountry { get; set; }

        [JsonProperty("iso_region")]
        public string IsoRegion { get; set; }

        [JsonProperty("local_code")]
        public string LocalCode { get; set; }

        [JsonProperty("municipality")]
        public string Municipality { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }
    public partial class AirportList

    { 
        public static List<AirportList> FromJson(string json) => JsonConvert.DeserializeObject<List<AirportList>>(json, AirportType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<AirportList> self) => JsonConvert.SerializeObject(self, AirportType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            NullValueHandling = NullValueHandling.Ignore,
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
                
            },
        };
    }
}

